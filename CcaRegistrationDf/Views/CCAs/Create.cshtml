@model CcaRegistrationDf.Models.CCAViewModel

@{
    ViewBag.Title = "Application";
}

<h2>Online Course Application</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group" id="SubmitterTypeCheckBox">
            @Html.Label("Which of the following are you?", new { @class = "col-md-4  control-radio" })

            <div class="col-md-8">
                @Html.Label("Student", "Student or Parent/Guardian", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.SubmitterTypeID, 1, new { htmlAttributes = new { title = "Student/Parent" }, id = "studentSubmitter" })
                @Html.Label("Counselor", "| Counselor", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.SubmitterTypeID, 2, new { htmlAttributes = new { title = "Counselor" } })
                @Html.Label("Provider", "| Provider", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.SubmitterTypeID, 3, new { htmlAttributes = new { title = "Provider" } })

                @Html.ValidationMessageFor(model => model.SubmitterTypeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <br />


        <h4>Student Information</h4>
        <hr />
        <div class="form-group" id="GradeCheckBox">
            @Html.Label("*Grade Level During Online Class Participation:", new { @class = "col-md-5  control-radio" })
            <div class="col-md-6">
                @Html.Label("seventhGrade", "7th*", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.StudentGradeLevel, 7, new { htmlAttributes = new { title = "7th Grade" }, id = "7" })
                @Html.Label("eighthGrade", "8th*", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.StudentGradeLevel, 8, new { htmlAttributes = new { title = "8th Grade" } })
                @Html.Label("eighthGrade", "9th", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.StudentGradeLevel, 9, new { htmlAttributes = new { title = "9th Grade" } })
                @Html.Label("eighthGrade", "10th", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.StudentGradeLevel, 10, new { htmlAttributes = new { title = "10th Grade" } })
                @Html.Label("eighthGrade", "11th", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.StudentGradeLevel, 11, new { htmlAttributes = new { title = "11th Grade" } })
                @Html.Label("eighthGrade", "12th", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.StudentGradeLevel, 12, new { htmlAttributes = new { title = "12th Grade" } })

                @Html.ValidationMessageFor(model => model.StudentGradeLevel, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="CreditRadio">
            @Html.Label("Will the student be registered for more than full day credit equivalent?", new { @class = "col-md-6  control-radio" })
            <div class="col-md-6">
                @Html.Label("Yes", "Yes", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.HasExcessiveFED, true, new { htmlAttributes = new { title = "Yes. Excess Credit." }, id = "YesExcessCredit" })
                @Html.Label("No", "No", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.HasExcessiveFED, false, new { htmlAttributes = new { title = "No excess credit." }, id = "NoExcessCredit" })

                @Html.ValidationMessageFor(model => model.HasExcessiveFED, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">

            <div class="col-md-5">
                
                @Html.DropDownListFor(model => model.ExcessiveFEDReasonID, Model.ExcessiveFEDReasonList, "Reason for excessive credit", new { @class = "form-control hide", id = "ExcessiveCreditReason", required = false })
                
                @Html.ValidationMessageFor(model => model.ExcessiveFEDReasonID, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-7">
                @Html.TextAreaFor(model => model.ExcessiveFEDExplanation, new { @class = "form-control hide", title = "Explanation of request to exceed allowable online credits(5.0)", placeholder = "Excessive Credit Explanation", id = "ExcessiveCreditExplanation" })
                @Html.ValidationMessageFor(model => model.ExcessiveFEDExplanation, "", new { @class = "text-danger" })
            </div>
        </div>


        <br />

        <h4>Counselor Information </h4>
        <hr />
        <p class="text-info">Please choose your school counselor.</p>

        @* Drop Down List for counselor Goes here *@

        @Html.HiddenFor(x => x.EnrollmentLocationID, new {id="EnrollmentLocation" })

        <div class="form-group hide" id="CounselorCactusID">
            @Html.LabelFor(model => model.CounselorCactusID, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.CounselorCactusID, new { @class = "form-control", id = "CounselorCactusId", title = "Acts as Counselor Signature", placeholder = "Counselor Cactus ID" })
                @Html.ValidationMessageFor(model => model.CounselorCactusID, "", new { @class = "text-danger" })
            </div>
        </div>
        
            <div class="form-group hide" id="CounselorPrivate">

                <div class="col-md-3">
                    @Html.EditorFor(model => model.CounselorFirstName, new { htmlAttributes = new { @class = "form-control", title = "Public and Charter School only", placeholder = "Counselor First Name" } })
                    @Html.ValidationMessageFor(model => model.CounselorFirstName, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-3">
                    @Html.EditorFor(model => model.CounselorLastName, new { htmlAttributes = new { @class = "form-control", title = "Public and Charter School only", placeholder = "Counselor Last Name" } })
                    @Html.ValidationMessageFor(model => model.CounselorLastName, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-3">
                    @Html.EditorFor(model => model.CounselorEmail, new { htmlAttributes = new { @class = "form-control", title = "Public and Charter School only", placeholder = "Counselor Email" } })
                    @Html.ValidationMessageFor(model => model.CounselorEmail, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-3">
                    @Html.EditorFor(model => model.CounselorPhoneNumber, new { htmlAttributes = new { @class = "phone form-control", title = "Public and Charter School only", placeholder = "Counselor Phone" } })
                    @Html.ValidationMessageFor(model => model.CounselorPhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>

       
            @Html.Display("No Counselor information necessary for Home School.", new { @class ="text-info hide", id ="NoCounselor"})
       
            <div class="form-group hide" id="CounselorPublic">
               
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CounselorID, Model.CounselorList, "Counselors at your school", new { @class = "form-control", id = "Counselor", required = false })
 
                    @Html.ValidationMessageFor(model => model.CounselorID, "", new { @class = "text-danger" })
                </div>
            </div>
       


        <br />


        <br />

        <h4>Available Online Courses </h4>
        <hr />
        <p class="text-info">Please choose Session first.</p>
        <div class="form-group">
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.SessionID, Model.Session, "*Session", new { @class = "form-control dropdown-wrapper", id = "Session" })

                @Html.ValidationMessageFor(model => model.SessionID, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.CourseCategoryID, Model.CourseCategory, "*Course Categories", new { @class = "form-control dropdown-wrapper", id = "Category" })

                @Html.ValidationMessageFor(model => model.CourseCategoryID, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-4">
                @Html.DropDownListFor(model => model.OnlineCourseID, Model.OnlineCourse, "*Courses", new { @class = "form-control dropdown-wrapper", id = "Course" })

                @Html.ValidationMessageFor(model => model.OnlineCourseID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                @Html.Label("Provider", new { @class = "alert alert-info hide", id = "Provider" })
                @Html.Label("Course", new { @class = "alert alert-info hide", id = "CourseName" })
                @Html.Label("Code", new { @class = "alert alert-info hide", id = "Code" })
                @Html.Label("Credit", new { @class = "alert alert-info hide", id = "Credit" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                @Html.Label("Note", new { @class = "alert alert-warning hide", id = "Note" })
            </div>
        </div>

        @Html.HiddenFor(x => x.ProviderID, new { id = "ProviderID" })

        <div class="form-group">
            
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.CourseCreditID, Model.CourseCredit, "Credit", new { @class = "form-control hide dropdown-wrapper", id = "CreditOptions" })

                @Html.ValidationMessageFor(model => model.CourseCreditID, "", new { @class = "text-danger" })
            </div>

        </div>


        <br />

        <div class="form-group">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
            </div>
        </div>

        <br />
        <div id="ProviderSection">
            <h4>Provider Information</h4>
            <hr />

            <div class="form-group">
                <div class="col-md-3">
                    @Html.EditorFor(model => model.TeacherFirstName, new { htmlAttributes = new { @class = "form-control", title = "Provider Representative First Name", placeholder = "Teacher First Name" } })
                    @Html.ValidationMessageFor(model => model.TeacherFirstName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.TeacherLastName, new { htmlAttributes = new { @class = "form-control", title = "Provider Representative Last Name", placeholder = "Teacher Last Name" } })
                    @Html.ValidationMessageFor(model => model.TeacherLastName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.TeacherCactusID, new { @class = "form-control", id = "ProviderCactusId", title = "Acts as Provider Signature", placeholder = "Teacher Cactus ID" })
                    @Html.ValidationMessageFor(model => model.TeacherCactusID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class=" col-md-12">
                <p>@Html.CheckBox("the-terms", false) * I have read the <a href="/Home/About/#terms" target="_blank">Terms and Conditions</a></p>
                <input id="submit" type="submit" value="Submit" class="btn btn-default" disabled="disabled" />
            </div>
        </div>

    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")


    <script>
        $(function () {
            var location = $('#EnrollmentLocation').val();
            if (location == 1)
            {
                $("#CounselorPrivate").addClass('hide');
                $("#CounselorPublic").addClass('hide');
                $("#NoCounselor").removeClass('hide');
            }
            else if (location == 2)
            {
                
                $("#CounselorPrivate").removeClass('hide');
                $("#CounselorPublic").addClass('hide');
                $("#NoCounselor").addClass('hide');
            }
            else
            {
                $("#CounselorPrivate").addClass('hide');
                $("#CounselorPublic").removeClass('hide');
                $("#NoCounselor").addClass('hide');
            }


            // On reload dropdowns needs to be reset.

            $('#Session option:first').attr("selected", true);

            $('#Category option:first').attr("selected", true);

            // Terms and Conditions

            $("#the-terms").click(function () {
                if ($(this).is(':checked')) {
                    $('#submit').removeAttr('disabled');
                } else {
                    $('#submit').attr("disabled", "disabled");
                }
            });

            //Add/hide fields according to user type.

            $("#SubmitterTypeCheckBox input[name='SubmitterTypeID']").click(function () {
                if ($(this).val() == 3) {
                    $("#ProviderSection").removeClass('hide');
                    $("#CounselorCactusID").addClass('hide');
                }
                else if ($(this).val() == 2) {
                    $("#CounselorCactusID").removeClass('hide');
                    $("#ProviderSection").addClass('hide');
                } else if ($(this).val() == 1) {
                    $("#ProviderSection").addClass('hide');
                    $("#CounselorCactusID").addClass('hide');
                }
            });

            $('input:radio:first').prop("checked", true).trigger("click");

            // Category DropDownLists
            //get Category list on changing of session dropdown list
            $('#Session').change(function () {
                $("#Category").empty();
                $("#Course").empty()
                $('#Provider,#Credit,#CreditOptions,#Code,#CourseName,#Note').addClass('hide');


                var items = '<option value="">Select Category</option>';
                $('#Category').html(items);
                var sessionId = $("#Session option:selected").val();
                var sessionName = $("#Session option:selected").text();

                if (sessionId != "") {

                   
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetCategories", "CCAs")',
                        data: { sessionId: sessionId },
                        dataType: 'json',
                        success: function (categoryList) {

                            $.each(categoryList, function (i, category) {

                                $('#Category').append("<option value='" + category.Value + "'>" + category.Text + "</option>");

                            });
                        },
                        error: function (result) {
                            alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
                        }
                    });
                }
                else {
                    var items = '<option value="">Select Session First</option>';
                    $('#Category').html(items);

                    var items1 = '<option value="">Select Category First</option>';
                    $('#Course').html(items);
                }
            });

       

            // Course DropDownLists
            //get course list on changing of category dropdown list
            $('#Category').change(function () {
                $("#Course").empty();
                $('#Provider,#Credit,#CreditOptions,#Code,#CourseName,#Note').addClass('hide');


                var items = '<option value="">Select Course</option>';
                $('#Course').html(items);
                var category = $("#Category option:selected").val();
                var categoryName = $("#Category option:selected").text();

                var session = $("#Session option:selected").val();
                var sessionName = $("#Session option:selected").text();

               
                
               

                if (category != "" && session != "") {

                    // Message for concurrent enrollment
                    if (categoryName == "Concurrent Enrollment")
                        $('#dialog-ConcurrentEnrollment').dialog({
                            width: 500,
                            dialogClass: "no-close",
                            buttons: [
                              {
                                  text: "OK",
                                  click: function () {
                                      $(this).dialog("close");
                                  }
                              }
                            ]
                        });
                    //alert("Courses offered under provider contract with an institution of higher education, which are not considered Concurrent Enrollment per 53A-15-101 and 53A-17a-120.5");

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetCourseNames", "CCAs")',
                        data: { categoryId: category, sessionId: session },
                        dataType: 'json',
                        success: function (courseList) {

                            $.each(courseList, function (i, course) {

                                $('#Course').append("<option value='" + course.Value + "'>" + course.Text + "</option>");

                            });
                        },
                        error: function (result) {
                            alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
                        }
                    });
                }
                else {
                    var items = '<option value="">Select Category First</option>';
                    $('#Course').html(items);
                }
            });

            // Get course information from course selection (ie. Provider, credit available, code)

            $('#Course').change(function () {
                $('#Provider,#Code,#Note,#CourseName,#Credit').addClass('hide');


                $("#CreditOptions").empty();
                var items = '<option value="">Select Credit</option>';
                $('#CreditOptions').html(items);

                var courseName = $("#Course option:selected").text().split('-')[0];

                if (courseName != "") {
                    $("#CourseName").removeClass('hide');
                    $('#CourseName').html("COURSE:" + courseName);

                }

                var course = $("#Course option:selected").val();
                if (course != "") {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetCourseInformation", "CCAs")',
                        data: { courseId: course },
                        dataType: 'json',
                        success: function (result) {
                            $("#CreditOptions").removeClass('hide');
                            
                            $.each(result.CreditChoices, function (i, value) {
                                if (value.Disabled != true) {
                                    $('#CreditOptions').append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                                }
                            });

                            $("#Provider").removeClass('hide');
                            $('#Provider').html('PROVIDER: ' + result.Name);

                            $('#ProviderID').val(result.OnlineProviderID);

                            $("#Code").removeClass('hide');
                            $('#Code').html("CODE: " + result.Code);

                            if (result.Notes != null) {
                                $('#Note').removeClass('hide');
                                $('#Note').html("NOTES: " + result.Notes);
                            }
                        },
                        error: function (result) {
                            alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
                        }
                    });
                }

            });

            // Populate credit dropdown

            $('#CreditOptions').change(function () {

                $("#Credit").removeClass('hide');

                var course = $("#CreditOptions option:selected").text();
                if (course != "") {
                    $('#Credit').html("CREDIT:" + course);
                }
                else {
                    $("#Credit").addClass('hide');
                }
            });

            // Message box to alert requirements for 7/8th grade registration

            $("#GradeCheckBox input[name='StudentGradeLevel']").click(function () {
                if ($(this).val() == 7 || $(this).val() == 8) {
                    $('#dialog-GradeLevel').dialog({
                        width: 500,
                        dialogClass: "no-close",
                        buttons: [
                          {
                              text: "OK",
                              click: function () {
                                  $(this).dialog("close");
                              }
                          }
                        ]
                    });
                    //alert(' 7*/8* only qualify to participate with:(a)SEOP or CCRP for early graduation, and(b) approval of high school which student intends to graduate from,  indicating that the high school will accept credit earned prior to the 9th grade for purposes of high school graduation.');
                }
            });

            // Excessive credit
            // Show inputs for full day excessive credit if clicked yes.

            $("#CreditRadio input[name$='HasExcessiveFED']").click(function () {
                if ($('#YesExcessCredit').is(':checked')) {
                    $('#dialog-ExcessiveFED').dialog({
                        width: 500,
                        dialogClass: "no-close",
                        buttons: [
                          {
                              text: "OK",
                              click: function () {
                                  $(this).dialog("close");
                              }
                          }
                        ]
                    });
                    // alert('(1) During any academic year, total enrolled credits may exceed a "full day equivalent” only if school district or charter school board policy allows this, or the student has a signed SEOP on file providing for Early Graduation.\n(2) During the 2014-15 school year students are limited to 4.0 credits, and during the 2015-16 school year this rises to 5 credits; students may request more credits if this better meets the academic goals of the student.\n(3) Electronic High School courses and Release Time are not to be considered when figuring course or credit "counts" as required in this application.');



                    $("#ExcessiveCreditReason, #ExcessiveCreditExplanation").removeClass('hide').prop('disabled', false).prop('required', true);
                }
                else {
                    $("#ExcessiveCreditReason, #ExcessiveCreditExplanation").addClass('hide').prop('disabled', true).prop('required', false);
                }
            });


            $(".phone").mask("(999) 999-9999");


        });
    </script>
}
<div id="dialog-GradeLevel" title="Eligible Grade Level Alert" style="display:none;">
    <p>7*/8* only qualify to participate with:(a)SEOP or CCRP for early graduation, and(b) approval of high school which student intends to graduate from,  indicating that the high school will accept credit earned prior to the 9th grade for purposes of high school graduation.</p>
</div>
<div id="dialog-ExcessiveFED" title="Excessive Credit Information" style="display:none;">
    <p>
        (1) During any academic year, total enrolled credits may exceed a "full day equivalent” only if school district or charter school board policy allows this, or the student has a signed SEOP on file providing for Early Graduation.
    </p>
    <p>
        (2) During the 2014-15 school year students are limited to 4.0 credits, and during the 2015-16 school year this rises to 5 credits; students may request more credits if this better meets the academic goals of the student.
    </p>
    <p>
        (3) Electronic High School courses and Release Time are not to be considered when figuring course or credit "counts" as required in this application.
    </p>
</div>

<div id="dialog-ConcurrentEnrollment" title="Concurrent Enrollment Courses" style="display:none;">
    <p>Concurrent enrollment courses undertaken through the Statewide Online Education Program are not eligible for state funding that allows for reduced expenses related to college admission, enrollment and credit. The student is responsible for all expenses associated with college enrollment, which are not subject to fee waiver. College admission fees cannot be waived.</p>
</div>