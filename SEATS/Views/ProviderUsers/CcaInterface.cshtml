@model SEATS.Models.ProviderCcaVmList


@{
    ViewBag.Title = "CcaInterface";
}

<h2>CCAs for @ViewBag.SchoolName </h2>

<p></p>


<table id="grid-basic" class="table table-hover table-striped bg-white">
    <thead>
        <tr>
            <th data-column-id="Submission Date">
                @Html.DisplayName("Date(Submission)")
            </th>
            <th data-column-id="fiscalyear">
                @Html.DisplayName("Fiscal Year")
            </th>
            <th data-column-id="Student">
                @Html.DisplayName("Student")
            </th>
            <th data-column-id="Course">
                @Html.DisplayName("Course")
            </th>
            <th data-column-id="Credit">
                @Html.DisplayName("Credit")
            </th>
            <th data-column-id="Primary">
                @Html.DisplayName("Primary")
            </th>
            <th data-column-id="status">
                @Html.DisplayName("Status")
            </th>
            <th data-column-id="accepts" data-formatter="ProviderAccepts">
                @Html.DisplayName("Accepted")
            </th>
            <th data-column-id="filedBy">
                @Html.DisplayName("Filed By")
            </th>
            <th data-column-id="started">
                @Html.DisplayName("Start Date")
            </th>
            <th data-column-id="teacherLastName">
                @Html.DisplayName("Teacher Last Name")
            </th>
            <th data-column-id="Semester">
                @Html.DisplayName("Semester")
            </th>
            <th data-column-id="Actionlinks" data-formatter="actions" data-sortable="false" data-type="numeric" data-identifier="true">
                @Html.DisplayName("Actions")
            </th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model.CcaList)
        {
            <tr>
                <td>
                    @String.Format("{0:MM/dd/yyyy}", item.ApplicationSubmissionDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FiscalYear)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Student.StudentLastName),
                    @Html.DisplayFor(modelItem => item.Student.StudentFirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OnlineCourse.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CourseCredit.Value)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Primary)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CourseCompletionStatus.Status)
                </td>
                <td>
                    @if (item.IsProviderAcceptsRejectsCourseRequest == true)
                    { <p>Accept</p> }
                    else if (item.ProviderRejectionReasonsID == null || item.ProviderRejectionReasonsID == 0)
                    { <p></p> }
                    else
                    { <p>Reject</p>}               
                </td>
                <td>
                    @if (item.SubmitterTypeID == 0)
                    { <p>S</p> }
                    else if (item.SubmitterTypeID == 1)
                    { <p>C</p> }
                    else if (item.SubmitterTypeID == 2)
                    { <p>P</p> }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CourseStartDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TeacherLastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Session.Name)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.CcaID)

                </td>
            </tr>
        }
    </tbody>
</table>

<pre id="example1console" class="console">Click 2 or more checkboxes to bulk edit rows.</pre>
<button name="edit" id="bulk-edit" class="intext-btn hide">Bulk Edit</button>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-horizontal hide" id="EditForm">
        <div class="form-group" id="BulkEdit1">
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.BulkEdit.CourseCompletionStatusID, Model.BulkEdit.CourseCompletionStatusList, htmlAttributes: new { @class = "form-control dropdown-wrapper", id = "Status" })
                @Html.ValidationMessageFor(model => model.BulkEdit.CourseCompletionStatusID, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.CourseStartDate, new { @class = "form-control datepicker", id = "startDate", title = "Date must be in mm/dd/yyyy format.", placeholder = "Start Date" })
                @Html.ValidationMessageFor(model => model.BulkEdit.CourseStartDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.DateConfirmationActiveParticipation, new { @class = "form-control datepicker", id = "activeDate", title = "Date must be in mm/dd/yyyy format.", placeholder = "Date Active" })
                @Html.ValidationMessageFor(model => model.BulkEdit.DateConfirmationActiveParticipation, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.CourseCompletionDate, new { @class = "form-control datepicker", id = "completeDate", title = "Date must be in mm/dd/yyyy format.", placeholder = "Date Completed" })
                @Html.ValidationMessageFor(model => model.BulkEdit.CourseCompletionDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <div class="form-group" id="BulkEdit2">           
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.DateReportPassingGrade, new { @class = "form-control datepicker", title = "Date must be in mm/dd/yyyy format.", placeholder = "Passed Date" })
                @Html.ValidationMessageFor(model => model.BulkEdit.DateReportPassingGrade, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.DateContinuationActiveParticipation, new { @class = "form-control datepicker", title = "Date must be in mm/dd/yyyy format.", placeholder = "Continued Date" })
                @Html.ValidationMessageFor(model => model.BulkEdit.DateContinuationActiveParticipation, "", new { @class = "text-danger" })
            </div>
           
        </div>

        <hr />
        <div class="form-group" id="BulkEdit3">
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.TeacherCactusID, new { @class = "form-control", id = "TeacherCactus", placeholder = "Teacher Cactus ID" })
                @Html.ValidationMessageFor(model => model.BulkEdit.TeacherCactusID, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.TeacherFirstName, new { @class = "form-control", id = "TeacherFirstName", title = "FirstName", placeholder = "Teacher First Name" })
                @Html.ValidationMessageFor(model => model.BulkEdit.TeacherFirstName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.TextBoxFor(model => model.BulkEdit.TeacherLastName, new { @class = "form-control", id = "TeacherLastName", title = "LastName.", placeholder = "Teacher Last Name" })
                @Html.ValidationMessageFor(model => model.BulkEdit.TeacherLastName, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="form-group" id="AcceptRadio">
            @Html.Label("Accept CCAs?", htmlAttributes: new { @class = "col-md-2  control-radio" })
            <div class="col-md-10">
                @Html.Label("Yes", "Yes", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.BulkEdit.IsProviderAcceptsRejectsCourseRequest, true, new { htmlAttributes = new { title = "Yes." }, id = "Accept" })
                @Html.Label("No", "No", new { @class = "control-radio" })
                @Html.RadioButtonFor(model => model.BulkEdit.IsProviderAcceptsRejectsCourseRequest, false, new { htmlAttributes = new { title = "No." }, id = "Reject" })

                @Html.ValidationMessageFor(model => model.BulkEdit.IsProviderAcceptsRejectsCourseRequest, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group hide" id="RejectionReasonSection">
            @Html.Label("Rejection Reason", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.BulkEdit.ProviderRejectionReasonsID, Model.BulkEdit.ProviderRejectionReasonsList, null, htmlAttributes: new { @class = "form-control dropdown-wrapper", id = "RejectReasons" })
                @Html.ValidationMessageFor(model => model.BulkEdit.ProviderRejectionReasonsID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group hide" id="RejectionExplanationSection">
            @Html.Label("Rejection Explanation", htmlAttributes: new { @class = "control-label col-md-2",  })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.BulkEdit.ProviderExplanationRejection, new { cols = 40, rows = 4, @class = "form-control" })
                
                @Html.ValidationMessageFor(model => model.BulkEdit.ProviderExplanationRejection, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="form-group">
            @Html.Label("Provider Notes", htmlAttributes: new { @class = "col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.BulkEdit.ProviderNotes, new { cols = 40, rows = 4, @class = "form-control" })

                @Html.ValidationMessageFor(model => model.BulkEdit.ProviderNotes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Course", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                <div class="col-md-4" id="EditCourse">
                    <p class="form-control-static text-danger">If category is changing, please make sure to update the CourseFee field.</p>
                    <p class="form-control-static">Session</p>
                    @Html.DropDownListFor(model => model.BulkEdit.SessionID, Model.BulkEdit.SessionList, "*Session", htmlAttributes: new { @class = "form-control dropdown-wrapper", id = "Session" })
                    @Html.ValidationMessageFor(model => model.BulkEdit.SessionID, "", new { @class = "text-danger" })
                    <p class="form-control-static">Category</p>
                    @Html.DropDownListFor(model => model.BulkEdit.CourseCategoryID, Model.BulkEdit.CourseCategoryList, htmlAttributes: new { @class = "form-control dropdown-wrapper", id = "Category" })
                    @Html.ValidationMessageFor(model => model.BulkEdit.CourseCategoryID, "", new { @class = "text-danger" })
                    <p class="form-control-static">Course</p>
                    @Html.DropDownListFor(model => model.BulkEdit.OnlineCourseID, Model.BulkEdit.OnlineCourseList, htmlAttributes: new { @class = "form-control dropdown-wrapper", id = "Course" })
                    @Html.ValidationMessageFor(model => model.BulkEdit.OnlineCourseID, "", new { @class = "text-danger" })
                    <p class="form-control-static">Credit</p>
                    @Html.DropDownListFor(model => model.BulkEdit.CourseCreditID, Model.BulkEdit.CourseCreditList, "Credit", new { @class = "form-control dropdown-wrapper", id = "CreditOptions", title = "To change credit: Unselect and reselect the course." })
                    @Html.ValidationMessageFor(model => model.BulkEdit.CourseCreditID, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-1 col-md-11">

                <input id="submit" type="submit" value="Submit" class="btn btn-default" />
            </div>
        </div>

    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/bootgrid")

    <script>

        var rowIds = [];
        // This script uses Jquery Bootgrid to format the data into a grid.  It also creates buttons form the edit, delete, details actions.
        $(function () {

            $(".datepicker").datepicker({
                changeMonth: true,
                changeYear: true
            });
            // JQuery Bootgrid.  See documentation at http://www.jquery-bootgrid.com/.
            // Added ability to grab row numbers and stash them for a bulk edit method.
            var grid = $("#grid-basic").bootgrid({

                selection: true,
                multiSelect: true,
                keepSelection: true,
                caseSensitive: false,
                rowCount: [-1, 10, 25, 50, 100],
                formatters: {
                    "ProviderAccepts": function (column, row) {

                        if ($.trim(row.accepts) == "Accept") {
                            return "<span class=\"alert alert-success\" >Accept</span>";
                        }
                        else if ($.trim(row.accepts) == "Reject") {
                            return "<span class=\"alert alert-danger\" >Reject</span>";
                        }                    

                    },

                    "actions": function (column, row) {
                        var id = $.trim(row.Actionlinks);
                        return "<a href=\" /CCAs/ProviderEdit/" + id + "\" class=\"btn btn-xs btn-default command-edit\" data-row-id=\"" + id + "\"><span class=\"glyphicon glyphicon-edit\" title = \"Edit\" ></span></button> " +
                             "<a href=\" /CCAs/ProviderDetails/" + id + "\" class=\"btn btn-xs btn-default command-details\" data-row-id=\"" + id + "\"><span class=\"glyphicon glyphicon-info-sign\" title = \"Details\"></span></a>";
                    }
                }
            }).on("selected.rs.jquery.bootgrid", function (e, rows) {
                $("#EditForm").addClass('hide');

                for (var i = 0; i < rows.length; i++) {
                    rowIds.push(rows[i].Actionlinks);

                }

                if (rowIds.length >= 2)
                    $("#bulk-edit").removeClass('hide');

                //alert("Select: " + rowIds.join(","));
            }).on("deselected.rs.jquery.bootgrid", function (e, rows) {
                $("#EditForm").addClass('hide');

                for (var i = 0; i < rows.length; i++) {
                    var index = rowIds.indexOf(rows[i].Actionlinks);
                    rowIds.splice(index, 1);

                }

                if (rowIds.length < 2)
                    $("#bulk-edit").addClass('hide');
                //alert("Deselect: " + rowIds.join(","));
            });


            $("#bulk-edit").click(function (e) {

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("RowSave", "ProviderUsers")',
                    data: { rowIds: rowIds },
                    dataType: 'json',
                    success: function (rejectReasonsList) {
                        $("#EditForm").removeClass('hide');

                        //$.each(rejectReasonsList, function (i, reason) {
                        //    $('#RejectReasons').append("<option value='" + reason.Value + "'>" + reason.Text + "</option>");
                        //});
                    },
                    error: function () {
                        alert('Service call failed');
                    }
                });

            });

            $("#AcceptRadio input[name$='IsProviderAcceptsRejectsCourseRequest']").click(function () {
                if ($('#Reject').is(':checked')) {

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetReasons", "ProviderUsers")',
                        
                        dataType: 'json',
                        success: function (rejectReasonsList) {
                            $("#EditForm").removeClass('hide');

                            $.each(rejectReasonsList, function (i, reason) {
                                $('#RejectReasons').append("<option value='" + reason.Value + "'>" + reason.Text + "</option>");
                            });
                        },
                        error: function () {
                            alert('Service call failed');
                        }
                    });
                    $("#RejectionReasonSection, #RejectionExplanationSection").removeClass('hide').prop('disabled', false).prop('required', true);
                }
                else {
                    $('#RejectReasons').empty();
                    $("#RejectionReasonSection, #RejectionExplanationSection").addClass('hide').prop('disabled', true).prop('required', false);
                }
            });

            // Category DropDownLists
            //get Category list on changing of session dropdown list
            $('#Session').change(function () {
                $("#Category, #Course,#CreditOptions,#CreditFee").empty();
                $("#CreditFee").html("<p class = \"text-danger\">Verify Course Fee matches new selection.</p>");

                $('#Provider,#Credit,#Code,#CourseName,#Note').addClass('hide');


                var items = '<option value="">Select Category</option>';
                $('#Category').html(items);
                var sessionId = $("#Session option:selected").val();
                var sessionName = $("#Session option:selected").text();

                if (sessionId != "") {


                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetCategoriesAndPrice", "CCAs")',
                        data: { sessionId: sessionId },
                        dataType: 'json',
                        success: function (categoryList) {

                            $.each(categoryList, function (i, category) {

                                $('#Category').append("<option value='" + category.Value + "'>" + category.Text + "</option>");

                            });
                        },
                        error: function (result) {
                            alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
                        }
                    });
                }
                else {
                    var items = '<option value="">Select Session First</option>';
                    $('#Category').html(items);

                    var items1 = '<option value="">Select Category First</option>';
                    $('#Course').html(items);
                }
            });

            // Course DropDownLists
            //get course list on changing of category dropdown list
            $('#Category').change(function () {
                $("#Course,#CreditOptions").empty();
                $("#CreditFee").html("<p class = \"text-danger\">Verify Course Fee matches new selection.</p>");
                $('#Provider,#Credit,#Code,#CourseName,#Note').addClass('hide');

                var items = '<option value="">Select Course</option>';
                $('#Course').html(items);
                var category = $("#Category option:selected").val();
                var categoryName = $("#Category option:selected").text();

                var session = $("#Session option:selected").val();
                var sessionName = $("#Session option:selected").text();

                if (category != "" && session != "") {

                    // Message for concurrent enrollment
                    if (categoryName == "Concurrent Enrollment")
                        $('#dialog-ConcurrentEnrollment').dialog({
                            width: 'auto',
                            dialogClass: "no-close",
                            maxWidth: 500,
                            fluid: true,
                            buttons: [
                              {
                                  text: "OK",
                                  click: function () {
                                      $(this).dialog("close");
                                  }
                              }
                            ]
                        });
                    //alert("Courses offered under provider contract with an institution of higher education, which are not considered Concurrent Enrollment per 53A-15-101 and 53A-17a-120.5");

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetCourseNames", "CCAs")',
                        data: { categoryId: category, sessionId: session },
                        dataType: 'json',
                        success: function (courseList) {

                            $.each(courseList, function (i, course) {

                                $('#Course').append("<option value='" + course.Value + "'>" + course.Text + "</option>");

                            });
                        },
                        error: function (result) {
                            alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
                        }
                    });
                }
                else {
                    var items = '<option value="">Select Category First</option>';
                    $('#Course').html(items);
                }
            });

            // Get course information from course selection (ie. Provider, credit available, code)

            $('#Course').change(function () {
                //$('#Code,#Note,#CourseName,#Credit').addClass('hide');


                $("#CreditOptions").empty();
                var items = '<option value="">Select Credit</option>';
                $('#CreditOptions').html(items);

                var courseName = $("#Course option:selected").text().split('-')[0];

                if (courseName != "") {
                    $("#CourseName").removeClass('hide');
                    $('#CourseName').html("COURSE:" + courseName);

                }

                var course = $("#Course option:selected").val();
                if (course != "") {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetCourseInformation", "CCAs")',
                        data: { courseId: course },
                        dataType: 'json',
                        success: function (result) {


                            $.each(result.CreditChoices, function (i, value) {
                                if (value.Disabled != true) {
                                    $('#CreditOptions').append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                                }
                            });

                            $('#ProviderID').val(result.OnlineProviderID);
                            $("#Code").removeClass('hide');
                            $('#Code').html("CODE: " + result.Code);

                            if (result.Notes != null) {
                                $('#Note').removeClass('hide');
                                $('#Note').html("NOTES: " + result.Notes);
                            }
                        },
                        error: function (result) {
                            alert('Service call failed: ' + result.status + ' Type :' + result.statusText);
                        }
                    });
                }

            });
        });



    </script>
}

